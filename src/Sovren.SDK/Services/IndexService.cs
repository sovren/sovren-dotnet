// Copyright Â© 2020 Sovren Group, Inc. All rights reserved.
// This file is provided for use by, or on behalf of, Sovren licensees
// within the terms of their license of Sovren products or Sovren customers
// within the Terms of Service pertaining to the Sovren SaaS products.

using Sovren.Models.API.Indexes;
using Sovren.Models.Job;
using Sovren.Models.Matching;
using Sovren.Models.Resume;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Sovren.Services
{
    /// <inheritdoc/>
    public class IndexService : SovrenService
    {
        /// <summary>
        /// Create a service to manage indexes and documents within those indexes
        /// </summary>
        /// <param name="client">The SovrenClient to make the low-level API calls</param>
        public IndexService(SovrenClient client)
            : base(client)
        {
        }

        /// <summary>
        /// Get an existing index
        /// </summary>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<Index> GetIndex(string indexId)
        {
            GetIndexResponse response = await Client.GetIndex(indexId);
            return response.Value;
        }

        /// <summary>
        /// Get all existing indexes
        /// </summary>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<List<Index>> GetAllIndexes()
        {
            GetAllIndexesResponse response = await Client.GetAllIndexes();
            return response.Value;
        }

        /// <summary>
        /// Create a new index
        /// </summary>
        /// <param name="type">The type of documents stored in this index. Either 'Resume' or 'Job'</param>
        /// <param name="indexId">
        /// The id to assign to the new index. This is restricted to alphanumeric with dashes 
        /// and underscores. All values will be converted to lower-case.
        /// </param>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<CreateIndexResponse> CreateIndex(IndexType type, string indexId)
        {
            return await Client.CreateIndex(type, indexId);
        }

        /// <summary>
        /// Delete an existing index. Note that this is a destructive action and 
        /// cannot be undone. All the documents in this index will be deleted.
        /// </summary>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<DeleteIndexResponse> DeleteIndex(string indexId)
        {
            return await Client.DeleteIndex(indexId);
        }

        /// <summary>
        /// Add a resume to an existing index
        /// </summary>
        /// <param name="resume">A resume generated by the Sovren Resume Parser</param>
        /// <param name="indexId">The id for the index where the document should be added (case-insensitive).</param>
        /// <param name="documentId">
        /// The id to assign to the new document. This is restricted to alphanumeric 
        /// with dashes and underscores. All values will be converted to lower-case.
        /// </param>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<IndexDocumentResponse> AddDocumentToIndex(ParsedResume resume, string indexId, string documentId)
        {
            IndexDocumentOptions options = new IndexDocumentOptions(indexId, documentId);
            return await Client.AddDocumentToIndex(resume, options);
        }

        /// <summary>
        /// Add a job to an existing index
        /// </summary>
        /// <param name="job">A job generated by the Sovren Job Parser</param>
        /// <param name="indexId">The id for the index where the document should be added (case-insensitive).</param>
        /// <param name="documentId">
        /// The id to assign to the new document. This is restricted to alphanumeric 
        /// with dashes and underscores. All values will be converted to lower-case.
        /// </param>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<IndexDocumentResponse> AddDocumentToIndex(ParsedJob job, string indexId, string documentId)
        {
            IndexDocumentOptions options = new IndexDocumentOptions(indexId, documentId);
            return await Client.AddDocumentToIndex(job, options);
        }

        /// <summary>
        /// Delete an existing document from an index
        /// </summary>
        /// <param name="docInfo">The id of the index containing the document, and the document id</param>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<DeleteDocumentResponse> DeleteDocumentFromIndex(IndexedDocumentInfo docInfo)
        {
            return await Client.DeleteDocumentFromIndex(docInfo.IndexId, docInfo.DocumentId);
        }

        /// <summary>
        /// Retrieve an existing resume from an index
        /// </summary>
        /// <param name="docInfo">The id of the index containing the document, and the document id</param>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<ParsedResume> GetResume(IndexedDocumentInfo docInfo)
        {
            GetResumeResponse response = await Client.GetResumeFromIndex(docInfo.IndexId, docInfo.DocumentId);
            return response.Value;
        }

        /// <summary>
        /// Retrieve an existing job from an index
        /// </summary>
        /// <param name="docInfo">The id of the index containing the document, and the document id</param>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<ParsedJob> GetJob(IndexedDocumentInfo docInfo)
        {
            GetJobResponse response = await Client.GetJobFromIndex(docInfo.IndexId, docInfo.DocumentId);
            return response.Value;
        }
    }
}
