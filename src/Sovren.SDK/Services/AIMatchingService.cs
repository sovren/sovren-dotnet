// Copyright Â© 2020 Sovren Group, Inc. All rights reserved.
// This file is provided for use by, or on behalf of, Sovren licensees
// within the terms of their license of Sovren products or Sovren customers
// within the Terms of Service pertaining to the Sovren SaaS products.

using Sovren.Models.API.Indexes;
using Sovren.Models.API.Matching;
using Sovren.Models.API.Matching.Request;
using Sovren.Models.Job;
using Sovren.Models.Resume;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Sovren.Services
{
    /// <inheritdoc/>
    public class AIMatchingService : SovrenService
    {
        /// <summary>
        /// Settings for all searches/matches
        /// </summary>
        public SearchMatchSettings Settings { get; set; }

        /// <summary>
        /// The number of results to return, leave as <see langword="null"/> for the default
        /// </summary>
        public int? NumResults { get; set; }

        /// <summary>
        /// Create a service to perform AI Matching/Searching
        /// </summary>
        /// <param name="client">The SovrenClient that will make the low-level API calls</param>
        /// <param name="settings">
        /// Settings for all searches/matches. if <see langword="null"/>, defaults will be used. 
        /// This can be changed on-the-fly via <see cref="Settings"/>
        /// </param>
        /// <param name="numResults">
        /// The number of results to return in a search/match. if <see langword="null"/>, default will be used. 
        /// This can be changed on-the-fly via <see cref="NumResults"/>
        /// </param>
        public AIMatchingService(SovrenClient client, SearchMatchSettings settings = null, int? numResults = null)
            : base(client)
        {
            Settings = settings;
            NumResults = numResults;
        }

        /// <summary>
        /// Find matches for a non-indexed resume. For matching against indexed resumes,
        /// see <see cref="MatchIndexedDocument"/>
        /// </summary>
        /// <param name="resume">The resume (generated by the Sovren Resume Parser) to use as the source for a match query</param>
        /// <param name="indexesToQuery">The indexes to find results in. These must all be of the same type (resumes or jobs)</param>
        /// <param name="preferredWeights">
        /// The preferred category weights for scoring the results. If none are provided,
        /// Sovren will determine the best values based on the source resume
        /// </param>
        /// <param name="filters">Any filters to apply prior to the match (a result must satisfy all the filters)</param>
        /// <returns>A <see cref="MatchResponseValue"/> containing results and any metadata</returns>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<MatchResponseValue> MatchResume(ParsedResume resume, List<string> indexesToQuery,
            CategoryWeights preferredWeights = null, FilterCriteria filters = null)
        {
            MatchResumeRequest request = CreateRequest(resume, indexesToQuery, preferredWeights, filters);
            MatchResponse response = await Client.Match(request);
            return response?.Value;
        }

        internal MatchResumeRequest CreateRequest(ParsedResume resume, List<string> indexesToQuery,
            CategoryWeights preferredWeights, FilterCriteria filters)
        {
            return new MatchResumeRequest()
            {
                ResumeData = resume,
                IndexIdsToSearchInto = indexesToQuery,
                PreferredCategoryWeights = preferredWeights,
                FilterCriteria = filters,
                Settings = Settings,
                Take = NumResults
            };
        }

        /// <summary>
        /// Find matches for a non-indexed job. For matching against indexed jobs,
        /// see <see cref="MatchIndexedDocument"/>
        /// </summary>
        /// <param name="job">The job (generated by the Sovren Job Parser) to use as the source for a match query</param>
        /// <param name="indexesToQuery">The indexes to find results in. These must all be of the same type (resumes or jobs)</param>
        /// <param name="preferredWeights">
        /// The preferred category weights for scoring the results. If none are provided,
        /// Sovren will determine the best values based on the source job
        /// </param>
        /// <param name="filters">Any filters to apply prior to the match (a result must satisfy all the filters)</param>
        /// <returns>A <see cref="MatchResponseValue"/> containing results and any metadata</returns>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<MatchResponseValue> MatchJob(ParsedJob job, List<string> indexesToQuery,
            CategoryWeights preferredWeights = null, FilterCriteria filters = null)
        {
            MatchJobRequest request = CreateRequest(job, indexesToQuery, preferredWeights, filters);
            MatchResponse response = await Client.Match(request);
            return response?.Value;
        }

        internal MatchJobRequest CreateRequest(ParsedJob job, List<string> indexesToQuery,
            CategoryWeights preferredWeights, FilterCriteria filters)
        {
            return new MatchJobRequest()
            {
                JobData = job,
                IndexIdsToSearchInto = indexesToQuery,
                PreferredCategoryWeights = preferredWeights,
                FilterCriteria = filters,
                Settings = Settings,
                Take = NumResults
            };
        }

        /// <summary>
        /// Find matches for a resume or job that is already indexed
        /// </summary>
        /// <param name="docInfo">The document to use as the source for a match query</param>
        /// <param name="indexesToQuery">The indexes to find results in. These must all be of the same type (resumes or jobs)</param>
        /// <param name="preferredWeights">
        /// The preferred category weights for scoring the results. If none are provided,
        /// Sovren will determine the best values based on the source resume/job
        /// </param>
        /// <param name="filters">Any filters to apply prior to the match (a result must satisfy all the filters)</param>
        /// <returns>A <see cref="MatchResponseValue"/> containing results and any metadata</returns>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<MatchResponseValue> MatchIndexedDocument(IndexedDocumentInfo docInfo, List<string> indexesToQuery,
            CategoryWeights preferredWeights = null, FilterCriteria filters = null)
        {
            MatchByDocumentIdOptions options = CreateRequest(docInfo, indexesToQuery, preferredWeights, filters);
            MatchResponse response = await Client.Match(docInfo.IndexId, docInfo.DocumentId, options);
            return response?.Value;
        }

        internal MatchByDocumentIdOptions CreateRequest(IndexedDocumentInfo docInfo, List<string> indexesToQuery,
            CategoryWeights preferredWeights, FilterCriteria filters)
        {
            return new MatchByDocumentIdOptions()
            {
                IndexIdsToSearchInto = indexesToQuery,
                PreferredCategoryWeights = preferredWeights,
                FilterCriteria = filters,
                Settings = Settings,
                Take = NumResults
            };
        }

        /// <summary>
        /// Search for resumes or jobs that meet specific criteria
        /// </summary>
        /// <param name="indexesToQuery">The indexes to find results in. These must all be of the same type (resumes or jobs)</param>
        /// <param name="query">The search query. A result must satisfy all of these criteria</param>
        /// <param name="skip">For pagination, the number of results to skip</param>
        /// <returns>A <see cref="SearchResponseValue"/> containing results and any metadata</returns>
        /// <exception cref="SovrenException">Thrown when an API error occurs</exception>
        public async Task<SearchResponseValue> Search(List<string> indexesToQuery, FilterCriteria query, uint skip = 0)
        {
            SearchRequest request = CreateRequest(indexesToQuery, query, skip);
            SearchResponse response = await Client.Search(request);
            return response?.Value;
        }

        internal SearchRequest CreateRequest(List<string> indexesToQuery, FilterCriteria query, uint skip)
        {
            return new SearchRequest()
            {
                IndexIdsToSearchInto = indexesToQuery,
                FilterCriteria = query,
                Settings = Settings,
                PaginationSettings = new PaginationSettings
                {
                    Take = NumResults,
                    Skip = (int)skip
                }
            };
        }
    }
}
